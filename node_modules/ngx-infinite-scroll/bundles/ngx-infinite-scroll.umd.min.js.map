{"version":3,"file":"ngx-infinite-scroll.umd.min.js","sources":["../../src/services/ngx-ins-utils.ts","../../src/services/event-trigger.ts","../../src/services/position-resolver.ts","../../src/services/scroll-resolver.ts","../../src/services/scroll-register.ts","../../src/services/axis-resolver.ts","../../src/modules/infinite-scroll.directive.ts","../../src/modules/ngx-infinite-scroll.module.ts"],"sourcesContent":["import * as console from 'console';\nimport { ElementRef, SimpleChange } from '@angular/core';\n/**\n * @param {?} selector\n * @param {?} scrollWindow\n * @param {?} defaultElement\n * @param {?} fromRoot\n * @return {?}\n */\nexport function resolveContainerElement(\n  selector: string | any,\n  scrollWindow,\n  defaultElement,\n  fromRoot: boolean\n): any {\n  const /** @type {?} */ hasWindow = window && !!window.document && window.document.documentElement;\n  let /** @type {?} */ container = hasWindow && scrollWindow ? window : defaultElement;\n  if (selector) {\n    const /** @type {?} */ containerIsString =\n      selector && hasWindow && typeof selector === 'string';\n    container = containerIsString\n      ? findElement(selector, defaultElement.nativeElement, fromRoot)\n      : selector;\n    if (!container) {\n      throw new Error('ngx-infinite-scroll {resolveContainerElement()}: selector for');\n    }\n  }\n  return container;\n}\n/**\n * @param {?} selector\n * @param {?} customRoot\n * @param {?} fromRoot\n * @return {?}\n */\nexport function findElement(\n  selector: string | any,\n  customRoot: ElementRef | any,\n  fromRoot: boolean\n) {\n  const /** @type {?} */ rootEl = fromRoot ? window.document : customRoot;\n  return rootEl.querySelector(selector);\n}\n/**\n * @param {?} prop\n * @return {?}\n */\nexport function inputPropChanged(prop: SimpleChange): boolean {\n  return prop && !prop.firstChange;\n}\n/**\n * @return {?}\n */\nexport function hasWindowDefined(): boolean {\n  return typeof window !== 'undefined';\n}\n","import { InfiniteScrollEvent, IPositionStats } from '../models';\n\nexport interface IScrollerProps {\n  container: IPositionStats;\n  down: number;\n  up: number;\n  alwaysCallback: boolean;\n  disabled: boolean;\n}\n\nexport interface ITriggerEvents {\n  down: (event: any) => any;\n  up: (event: any) => any;\n}\n\nexport interface IDistanceRange {\n  down: number;\n  up: number;\n}\n\nexport interface IScrollConfig {\n  alwaysCallback: boolean;\n  disable: boolean;\n  shouldScroll: boolean;\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nexport function shouldTriggerEvents({\n  alwaysCallback,\n  shouldScroll,\n  disable\n}: IScrollConfig) {\n  return (alwaysCallback || shouldScroll) && !disable;\n}\n/**\n * @param {?} callbacks\n * @param {?} isScrollingDown\n * @param {?} scrolledUntilNow\n * @return {?}\n */\nexport function triggerEvents(\n  callbacks: ITriggerEvents,\n  isScrollingDown: boolean,\n  scrolledUntilNow: number\n) {\n  const /** @type {?} */ eventData: InfiniteScrollEvent = {\n    currentScrollPosition: scrolledUntilNow\n  };\n  const /** @type {?} */ callback = isScrollingDown ? callbacks.down : callbacks.up;\n  callback(eventData);\n}\n","import { ElementRef } from '@angular/core';\n\nimport { ContainerRef, IPositionElements, IPositionStats, IResolver } from '../models';\nimport { AxisResolver } from './axis-resolver';\n/**\n * @param {?} __0\n * @return {?}\n */\nexport function createResolver({\n  isWindow,\n  windowElement,\n  axis\n}: IPositionElements): IResolver {\n  return createResolverWithContainer(\n    {\n      axis,\n      isWindow\n    },\n    windowElement\n  );\n}\n/**\n * @param {?} resolver\n * @param {?} windowElement\n * @return {?}\n */\nexport function createResolverWithContainer(\n  resolver,\n  windowElement: ContainerRef\n) {\n  const /** @type {?} */ container =\n    resolver.isWindow || (windowElement && !windowElement.nativeElement)\n      ? windowElement\n      : windowElement.nativeElement;\n  return { ...resolver, container };\n}\n/**\n * @param {?} windowElement\n * @return {?}\n */\nexport function isElementWindow(windowElement: ContainerRef): boolean {\n  const /** @type {?} */ isWindow = ['Window', 'global'].some((obj: string) =>\n    Object.prototype.toString.call(windowElement).includes(obj)\n  );\n  return isWindow;\n}\n/**\n * @param {?} isContainerWindow\n * @param {?} windowElement\n * @return {?}\n */\nexport function getDocumentElement(isContainerWindow: boolean, windowElement) {\n  return isContainerWindow ? windowElement.document.documentElement : null;\n}\n/**\n * @param {?} element\n * @param {?} resolver\n * @return {?}\n */\nexport function calculatePoints(element: ElementRef, resolver: IResolver) {\n  const /** @type {?} */ height = extractHeightForElement(resolver);\n  return resolver.isWindow\n    ? calculatePointsForWindow(height, element, resolver)\n    : calculatePointsForElement(height, element, resolver);\n}\n/**\n * @param {?} height\n * @param {?} element\n * @param {?} resolver\n * @return {?}\n */\nexport function calculatePointsForWindow(\n  height: number,\n  element: ElementRef,\n  resolver: IResolver\n): IPositionStats {\n  const { axis, container, isWindow } = resolver;\n  const { offsetHeightKey, clientHeightKey } = extractHeightPropKeys(axis);\n  // scrolled until now / current y point\n  const /** @type {?} */ scrolledUntilNow =\n    height +\n    getElementPageYOffset(\n      getDocumentElement(isWindow, container),\n      axis,\n      isWindow\n    );\n  // total height / most bottom y point\n  const /** @type {?} */ nativeElementHeight = getElementHeight(\n    element.nativeElement,\n    isWindow,\n    offsetHeightKey,\n    clientHeightKey\n  );\n  const /** @type {?} */ totalToScroll =\n    getElementOffsetTop(element.nativeElement, axis, isWindow) +\n    nativeElementHeight;\n  return { height, scrolledUntilNow, totalToScroll };\n}\n/**\n * @param {?} height\n * @param {?} element\n * @param {?} resolver\n * @return {?}\n */\nexport function calculatePointsForElement(\n  height: number,\n  element: ElementRef,\n  resolver: IResolver\n): IPositionStats {\n  const { axis, container } = resolver;\n  // perhaps use container.offsetTop instead of 'scrollTop'\n  const /** @type {?} */ scrolledUntilNow = container[axis.scrollTopKey()];\n  const /** @type {?} */ totalToScroll = container[axis.scrollHeightKey()];\n  return { height, scrolledUntilNow, totalToScroll };\n}\n/**\n * @param {?} axis\n * @return {?}\n */\nexport function extractHeightPropKeys(axis: AxisResolver) {\n  return {\n    offsetHeightKey: axis.offsetHeightKey(),\n    clientHeightKey: axis.clientHeightKey()\n  };\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nexport function extractHeightForElement({\n  container,\n  isWindow,\n  axis\n}: IResolver) {\n  const { offsetHeightKey, clientHeightKey } = extractHeightPropKeys(axis);\n  return getElementHeight(\n    container,\n    isWindow,\n    offsetHeightKey,\n    clientHeightKey\n  );\n}\n/**\n * @param {?} elem\n * @param {?} isWindow\n * @param {?} offsetHeightKey\n * @param {?} clientHeightKey\n * @return {?}\n */\nexport function getElementHeight(\n  elem: any,\n  isWindow: boolean,\n  offsetHeightKey: string,\n  clientHeightKey: string\n) {\n  if (isNaN(elem[offsetHeightKey])) {\n    return getDocumentElement(isWindow, elem)[clientHeightKey];\n  } else {\n    return elem[offsetHeightKey];\n  }\n}\n/**\n * @param {?} elem\n * @param {?} axis\n * @param {?} isWindow\n * @return {?}\n */\nexport function getElementOffsetTop(\n  elem: ContainerRef,\n  axis: AxisResolver,\n  isWindow: boolean\n) {\n  const /** @type {?} */ topKey = axis.topKey();\n  // elem = elem.nativeElement;\n  if (!elem.getBoundingClientRect) {\n    // || elem.css('none')) {\n    return;\n  }\n  return (\n    elem.getBoundingClientRect()[topKey] +\n    getElementPageYOffset(elem, axis, isWindow)\n  );\n}\n/**\n * @param {?} elem\n * @param {?} axis\n * @param {?} isWindow\n * @return {?}\n */\nexport function getElementPageYOffset(\n  elem: ContainerRef,\n  axis: AxisResolver,\n  isWindow: boolean\n) {\n  const /** @type {?} */ pageYOffset = axis.pageYOffsetKey();\n  const /** @type {?} */ scrollTop = axis.scrollTopKey();\n  const /** @type {?} */ offsetTop = axis.offsetTopKey();\n\n  if (isNaN(window[pageYOffset])) {\n    return getDocumentElement(isWindow, elem)[scrollTop];\n  } else if (elem.ownerDocument) {\n    return elem.ownerDocument.defaultView[pageYOffset];\n  } else {\n    return elem[offsetTop];\n  }\n}\n","import { IPositionStats, IScrollerConfig } from '../models';\n/**\n * @param {?} container\n * @param {?} config\n * @param {?} scrollingDown\n * @return {?}\n */\nexport function shouldScroll(\n  container: IPositionStats,\n  config: IScrollerConfig,\n  scrollingDown: boolean\n) {\n  const /** @type {?} */ distance = config.distance;\n  let /** @type {?} */ remaining: number;\n  let /** @type {?} */ containerBreakpoint: number;\n  if (scrollingDown) {\n    remaining = container.totalToScroll - container.scrolledUntilNow;\n    containerBreakpoint = container.height * distance.down + 1;\n  } else {\n    remaining = container.scrolledUntilNow;\n    containerBreakpoint = container.height * distance.up + 1;\n  }\n  const /** @type {?} */ shouldScroll: boolean = remaining <= containerBreakpoint;\n  return shouldScroll;\n}\n/**\n * @param {?} lastScrollPosition\n * @param {?} container\n * @return {?}\n */\nexport function isScrollingDownwards(\n  lastScrollPosition: number,\n  container: IPositionStats\n) {\n  return lastScrollPosition < container.scrolledUntilNow;\n}\n/**\n * @param {?} lastScrollPosition\n * @param {?} container\n * @param {?} config\n * @return {?}\n */\nexport function getScrollStats(\n  lastScrollPosition: number,\n  container: IPositionStats,\n  config: IScrollerConfig\n) {\n  const /** @type {?} */ isScrollingDown = isScrollingDownwards(lastScrollPosition, container);\n  return {\n    shouldScroll: shouldScroll(container, config, isScrollingDown),\n    isScrollingDown\n  };\n}\n/**\n * @param {?} position\n * @param {?} lastPositionState\n * @return {?}\n */\nexport function updateScrollPosition(position: number, lastPositionState) {\n  return (lastPositionState.last = position);\n}\n","import'rxjs/add/observable/fromEvent';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/mergeMap';\nimport'rxjs/add/operator/sampleTime';\n\nimport { ElementRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { ContainerRef, IPositionStats } from '../models';\nimport { AxisResolver } from './axis-resolver';\nimport { shouldTriggerEvents, triggerEvents } from './event-trigger';\nimport { resolveContainerElement } from './ngx-ins-utils';\nimport { calculatePoints, createResolver, isElementWindow } from './position-resolver';\nimport { getScrollStats, updateScrollPosition } from './scroll-resolver';\n\nexport interface IScrollRegisterConfig {\n  container: ContainerRef;\n  throttleDuration: number;\n  mergeMap: Function;\n  scrollHandler: (value: any) => void;\n}\n\nexport interface IScroller {\n  fromRoot: boolean;\n  horizontal: boolean;\n  disable: boolean;\n  throttle: number;\n  scrollWindow: boolean;\n  element: ElementRef;\n  scrollContainer: string | ElementRef;\n  alwaysCallback: boolean;\n  downDistance: number;\n  upDistance: number;\n  events?: {\n    down: (ev) => any;\n    up: (ev) => any;\n  };\n}\n/**\n * @param {?} options\n * @return {?}\n */\nexport function attachScrollEvent(\n  options: IScrollRegisterConfig\n): Subscription {\n  return Observable.fromEvent(options.container, 'scroll')\n    .sampleTime(options.throttleDuration)\n    .mergeMap((ev: any) => Observable.of(options.mergeMap(ev)))\n    .subscribe(options.scrollHandler);\n}\n/**\n * @param {?} config\n * @return {?}\n */\nexport function createScroller(config: IScroller): Subscription {\n  const /** @type {?} */ containerElement = resolveContainerElement(\n    config.scrollContainer,\n    config.scrollWindow,\n    config.element,\n    config.fromRoot\n  );\n  const /** @type {?} */ resolver = createResolver({\n    axis: new AxisResolver(!config.horizontal),\n    isWindow: isElementWindow(containerElement),\n    windowElement: containerElement\n  });\n  const /** @type {?} */ scrollPosition = {\n    last: 0\n  };\n  const /** @type {?} */ options: IScrollRegisterConfig = {\n    container: resolver.container,\n    mergeMap: () => calculatePoints(config.element, resolver),\n    scrollHandler: (positionStats: IPositionStats) =>\n      handleOnScroll(scrollPosition, positionStats, config),\n    throttleDuration: config.throttle\n  };\n  return attachScrollEvent(options);\n}\n/**\n * @param {?} scrollPosition\n * @param {?} positionStats\n * @param {?} config\n * @return {?}\n */\nexport function handleOnScroll(\n  scrollPosition,\n  positionStats: IPositionStats,\n  config: IScroller\n) {\n  const /** @type {?} */ distance = {\n    down: config.downDistance,\n    up: config.upDistance\n  };\n  const { isScrollingDown, shouldScroll } = getScrollStats(\n    scrollPosition.last,\n    positionStats,\n    {\n      distance\n    }\n  );\n  const /** @type {?} */ scrollConfig = {\n    alwaysCallback: config.alwaysCallback,\n    disable: config.disable,\n    shouldScroll\n  };\n  updateScrollPosition(positionStats.scrolledUntilNow, scrollPosition);\n  if (shouldTriggerEvents(scrollConfig)) {\n    triggerEvents(\n      config.events,\n      isScrollingDown,\n      positionStats.scrolledUntilNow\n    );\n  }\n}\n","\nexport class AxisResolver {\n/**\n * @param {?=} vertical\n */\nconstructor(private vertical: boolean = true) {\n  }\n/**\n * @return {?}\n */\nclientHeightKey() { return this.vertical ? 'clientHeight' : 'clientWidth'; }\n/**\n * @return {?}\n */\noffsetHeightKey() { return this.vertical ? 'offsetHeight' : 'offsetWidth'; }\n/**\n * @return {?}\n */\nscrollHeightKey() { return this.vertical ? 'scrollHeight' : 'scrollWidth'; }\n/**\n * @return {?}\n */\npageYOffsetKey() { return this.vertical ? 'pageYOffset' : 'pageXOffset'; }\n/**\n * @return {?}\n */\noffsetTopKey() { return this.vertical ? 'offsetTop' : 'offsetLeft'; }\n/**\n * @return {?}\n */\nscrollTopKey() { return this.vertical ? 'scrollTop' : 'scrollLeft'; }\n/**\n * @return {?}\n */\ntopKey() { return this.vertical ? 'top' : 'left'; }\n}\n\nfunction AxisResolver_tsickle_Closure_declarations() {\n/** @type {?} */\nAxisResolver.prototype.vertical;\n}\n\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { InfiniteScrollEvent } from '../models';\nimport { hasWindowDefined, inputPropChanged } from '../services/ngx-ins-utils';\nimport { createScroller } from '../services/scroll-register';\nexport class InfiniteScrollDirective\n  implements OnDestroy, OnChanges, AfterViewInit {\n   scrolled = new EventEmitter<InfiniteScrollEvent>();\n   scrolledUp = new EventEmitter<InfiniteScrollEvent>();\n\n   infiniteScrollDistance: number = 2;\n   infiniteScrollUpDistance: number = 1.5;\n   infiniteScrollThrottle: number = 300;\n   infiniteScrollDisabled: boolean = false;\n   infiniteScrollContainer: any = null;\n   scrollWindow: boolean = true;\n   immediateCheck: boolean = false;\n   horizontal: boolean = false;\n   alwaysCallback: boolean = false;\n   fromRoot: boolean = false;\nprivate disposeScroller: Subscription;\n/**\n * @param {?} element\n * @param {?} zone\n */\nconstructor(private element: ElementRef,\nprivate zone: NgZone) { }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    if (!this.infiniteScrollDisabled) {\n      this.setup();\n    }\n  }\n/**\n * @param {?} __0\n * @return {?}\n */\nngOnChanges({ infiniteScrollContainer, infiniteScrollDisabled, infiniteScrollDistance }: SimpleChanges) {\n    const /** @type {?} */ containerChanged = inputPropChanged(infiniteScrollContainer);\n    const /** @type {?} */ disabledChanged = inputPropChanged(infiniteScrollDisabled);\n    const /** @type {?} */ distanceChanged = inputPropChanged(infiniteScrollDistance);\n    const /** @type {?} */ shouldSetup = (!disabledChanged && !this.infiniteScrollDisabled) ||\n      (disabledChanged && !infiniteScrollDisabled.currentValue) || distanceChanged;\n\n    if (containerChanged || disabledChanged || distanceChanged) {\n      this.destroyScroller();\n      if (shouldSetup) {\n        this.setup();\n      }\n    }\n  }\n/**\n * @return {?}\n */\nsetup() {\n    if (hasWindowDefined()) {\n      this.zone.runOutsideAngular(() => {\n        this.disposeScroller = createScroller({\n          fromRoot: this.fromRoot,\n          alwaysCallback: this.alwaysCallback,\n          disable: this.infiniteScrollDisabled,\n          downDistance: this.infiniteScrollDistance,\n          element: this.element,\n          events: {\n            // tslint:disable-next-line:arrow-parens\n            down: event => this.zone.run(() => this.scrolled.emit(event)),\n            // tslint:disable-next-line:arrow-parens\n            up: event => this.zone.run(() => this.scrolledUp.emit(event))\n          },\n          horizontal: this.horizontal,\n          scrollContainer: this.infiniteScrollContainer,\n          scrollWindow: this.scrollWindow,\n          throttle: this.infiniteScrollThrottle,\n          upDistance: this.infiniteScrollUpDistance\n        });\n      });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.destroyScroller();\n  }\n/**\n * @return {?}\n */\ndestroyScroller() {\n    if (this.disposeScroller) {\n      this.disposeScroller.unsubscribe();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[infiniteScroll], [infinite-scroll], [data-infinite-scroll]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'scrolled': [{ type: Output },],\n'scrolledUp': [{ type: Output },],\n'infiniteScrollDistance': [{ type: Input },],\n'infiniteScrollUpDistance': [{ type: Input },],\n'infiniteScrollThrottle': [{ type: Input },],\n'infiniteScrollDisabled': [{ type: Input },],\n'infiniteScrollContainer': [{ type: Input },],\n'scrollWindow': [{ type: Input },],\n'immediateCheck': [{ type: Input },],\n'horizontal': [{ type: Input },],\n'alwaysCallback': [{ type: Input },],\n'fromRoot': [{ type: Input },],\n};\n}\n\nfunction InfiniteScrollDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nInfiniteScrollDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInfiniteScrollDirective.ctorParameters;\n/** @type {?} */\nInfiniteScrollDirective.propDecorators;\n/** @type {?} */\nInfiniteScrollDirective.prototype.scrolled;\n/** @type {?} */\nInfiniteScrollDirective.prototype.scrolledUp;\n/** @type {?} */\nInfiniteScrollDirective.prototype.infiniteScrollDistance;\n/** @type {?} */\nInfiniteScrollDirective.prototype.infiniteScrollUpDistance;\n/** @type {?} */\nInfiniteScrollDirective.prototype.infiniteScrollThrottle;\n/** @type {?} */\nInfiniteScrollDirective.prototype.infiniteScrollDisabled;\n/** @type {?} */\nInfiniteScrollDirective.prototype.infiniteScrollContainer;\n/** @type {?} */\nInfiniteScrollDirective.prototype.scrollWindow;\n/** @type {?} */\nInfiniteScrollDirective.prototype.immediateCheck;\n/** @type {?} */\nInfiniteScrollDirective.prototype.horizontal;\n/** @type {?} */\nInfiniteScrollDirective.prototype.alwaysCallback;\n/** @type {?} */\nInfiniteScrollDirective.prototype.fromRoot;\n/** @type {?} */\nInfiniteScrollDirective.prototype.disposeScroller;\n/** @type {?} */\nInfiniteScrollDirective.prototype.element;\n/** @type {?} */\nInfiniteScrollDirective.prototype.zone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\n\nimport { InfiniteScrollDirective } from './infinite-scroll.directive';\nexport class InfiniteScrollModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [InfiniteScrollDirective],\n  exports: [InfiniteScrollDirective],\n  imports: [],\n  providers: []\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InfiniteScrollModule_tsickle_Closure_declarations() {\n/** @type {?} */\nInfiniteScrollModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInfiniteScrollModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["resolveContainerElement","selector","scrollWindow","defaultElement","fromRoot","hasWindow","window","document","documentElement","container","findElement","nativeElement","Error","customRoot","querySelector","inputPropChanged","prop","firstChange","hasWindowDefined","shouldTriggerEvents","_a","alwaysCallback","shouldScroll","disable","triggerEvents","callbacks","isScrollingDown","scrolledUntilNow","eventData","currentScrollPosition","down","up","createResolver","isWindow","windowElement","createResolverWithContainer","axis","resolver","Object","assign","isElementWindow","some","obj","prototype","toString","call","includes","getDocumentElement","isContainerWindow","calculatePoints","element","height","extractHeightForElement","calculatePointsForWindow","calculatePointsForElement","extractHeightPropKeys","offsetHeightKey","clientHeightKey","getElementPageYOffset","nativeElementHeight","getElementHeight","totalToScroll","getElementOffsetTop","scrollTopKey","scrollHeightKey","_b","elem","isNaN","topKey","getBoundingClientRect","pageYOffset","pageYOffsetKey","scrollTop","offsetTop","offsetTopKey","ownerDocument","defaultView","config","scrollingDown","remaining","containerBreakpoint","distance","isScrollingDownwards","lastScrollPosition","getScrollStats","updateScrollPosition","position","lastPositionState","last","attachScrollEvent","options","Observable","fromEvent","sampleTime","throttleDuration","mergeMap","ev","of","subscribe","scrollHandler","createScroller","containerElement","scrollContainer","AxisResolver","horizontal","scrollPosition","positionStats","handleOnScroll","throttle","downDistance","upDistance","shouldScroll$$1","scrollConfig","events","vertical","this","InfiniteScrollDirective","zone","scrolled","EventEmitter","scrolledUp","infiniteScrollDistance","infiniteScrollUpDistance","infiniteScrollThrottle","infiniteScrollDisabled","infiniteScrollContainer","immediateCheck","ngAfterViewInit","setup","ngOnChanges","containerChanged","disabledChanged","distanceChanged","shouldSetup","currentValue","destroyScroller","_this","runOutsideAngular","disposeScroller","event","run","emit","ngOnDestroy","unsubscribe","decorators","type","Directive","args","ctorParameters","ElementRef","NgZone","propDecorators","Output","Input","InfiniteScrollModule","NgModule","declarations","exports","imports","providers"],"mappings":"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"}